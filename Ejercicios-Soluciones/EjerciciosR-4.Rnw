\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{amsmath}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\geometry{verbose,tmargin=1.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(grid)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@


\title{Pr\'actica de Laboratorio de R}


\author{Curso: Introducci\'on a la Estad\'istica y Probabilidades CM-274}
\date{}
\maketitle

\vspace{0.3cm}


\textbf{Lecturas Importantes }
\begin{enumerate}
\item Zev Chonoles tiene una lista importantes de Links que todo estudiantes de matem\'aticas o  de CC tiene que conocer: \url{http://math.uchicago.edu/~chonoles/links/}, 
\item \textit{La guia de Estilo de Google para R}, una guia hecha por la comunidad de Google que usa R:  \url{http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml}.
\end{enumerate}
%{\normalsize Los c\'odigos, se presentaran impresos,  o como un archivo con extensi\'on $.R$, mostrando ejemplos de su ejecuci\'on.}
\setlength{\unitlength}{1in}

\begin{picture}(6,.1) 
\put(0,0) {\line(1,0){6.25}}         
\end{picture}

\vspace{0.2cm}

{\Large Preguntas }


\vspace{0.3cm}
\begin{enumerate}

\item ?`Que hacen los siguientes c\'odigos ?. Corregir si es necesario. Explica que hace cada funci\'on, su prop\'osito de los argumentos en la llamada de la funci\'on y que tipo de estructura es producida en cada llamada de funci\'on. Muestra ejemplos.
\begin{enumerate}
\item 
<<fo2, prompt =TRUE, comment =NA, eval=FALSE>>=
f1 <- function(d) {
   n <- nrow(d)
   dd <- cbind(d,1:n) 
   cm <- apply(dd[-n,],1,f2) 
   i <- which.min(cm[2,])
   j <- cm[1,i] 
   return(c(d[i,j],i,j)) 
}

f2 <- function(x) { 
   lx <- length(x)
   i <- x[lx] 
   j <- which.min(x[(i+1):(lx-1)]) 
   k <- i+j  
   return(c(k,x[k]))
}

@
\item 
<<fo3, prompt =TRUE, comment =NA, eval=FALSE>>=
 n <- 1000
    u <- runif(n)
    x <- u^(1/3)
    hist(x, prob = TRUE, main = bquote(f(x)==3*x^2)) 
    y <- seq(0, 1, .01)
    lines(y, 3*y^2) 
@
\item 
<<fo4, prompt =TRUE, comment =NA, eval=FALSE>>=
n <- 1000
    p <- 0.25
    u <- runif(n)
    k <- ceiling(log(1-u) / log(1-p)) - 1
    
    # Es mas eficiente, por que?
    k <- floor(log(u) / log(1-p))
@

\item 
<<fo5, prompt =TRUE, comment =NA, eval=FALSE>>=
n <- 1000
    a <- 3
    b <- 2
    u <- rgamma(n, shape=a, rate=1)
    v <- rgamma(n, shape=b, rate=1)
    x <- u / (u + v)

    q <- qbeta(ppoints(n), a, b)
    qqplot(q, x, cex=0.25, xlab="Beta(3, 2)", ylab="Muestra")
    abline(0, 1)
@
\item 
<<fo6, prompt =TRUE, comment =NA, eval=FALSE>>=
f1<- function(n, mu, Sigma) {
        d <- length(mu)
        S <- svd(Sigma)
        R <- S$u %*% diag(sqrt(S$d)) %*% t(S$v) 
        Z <- matrix(rnorm(n*d), nrow=n, ncol=d)
        X <- Z %*% R + matrix(mu, n, d, byrow=TRUE)
        X
    }
@
\item 
<<fo7, prompt =TRUE, comment =NA, eval=FALSE>>=
 l <- 2
    t <- 3
    u <- 100
    pp <- numeric(10000)
    for (i in 1:10000) {
        N <- rpois(1, l * u)
        Un <- runif(N, 0, u)      
        Sn <- sort(Un)                
        n <- min(which(Sn > t))      
        pp[i] <- n - 1                
        }

    pp <- replicate(10000, expr = {
        N <- rpois(1, l * u)
        Un <- runif(N, 0, u)      
        Sn <- sort(Un)                
        n <- min(which(Sn > t))      
        n - 1  })                     

    c(mean(pp), var(pp))   
@
\end{enumerate}

\item 
\begin{enumerate}
\item La funci\'on 
<<fo1, prompt =TRUE, comment =NA, eval=FALSE>>=
f <-function(x,y){
  if(y > 0)
    y *sin(x)
  else
    x*sin(y)
}
@
no soporta el \textbf{recycling}. Explica como puedes modificar la funci\'on para que si pueda soportarlo.


\item 
\begin{enumerate}
\item Encuentra esxpresiones en R para encontrar el epsilon de la m\'aquina. \url{https://en.wikipedia.org/wiki/Machine_epsilon}.
\item Reproduce el siguiente c\'odigo fuente en R, para mostrar  la siguiente  tabla de probabilidad de la \texttt{distribuci\'on est\'andar normal}. Explica el uso de la funci\'on \texttt{outer()}.
<<f2, prompt =TRUE, comment =NA, eval=FALSE>>=
id <- 0:4
dn <- seq(0, .8, by =.2)
p = outer(id, dn, function(x,y) pnorm(x + y))
dimnames(p) = list(z = id, "Primer lugar decimal de z " = dn)
p = round(p, 5)
@
\end{enumerate}
\item 
\begin{enumerate}
\item Dada una matriz num\'erica $X$, determinar el \'indice de la primera fila cuyos elementos son todos  n\'umeros positivos (y que no contienen  valores  NA). Resuelve usando la funci\'on \texttt{apply} y usando un bucle \texttt{for}.
\item Escribe una funci\'on llamada \texttt{nesimo.na (x,n)} que toma un vector $x$ y retorna 
\begin{enumerate}
\item el \'indice de la \texttt{\'enesima} valor NA que ocurre en $x$ o
\item NA si hay menos de $n$ valores NA en el vector $x$. 
\end{enumerate}
\end{enumerate}
\end{enumerate}

\item 
\begin{enumerate}
\item Considere la siguiente curiosidad

\begin{align*}
8 \times 8 + 13 &= 77 \\
8 \times 88 + 13 &= 717 \\
8 \times 888 + 13 &= 7117 \\
8 \times 8888 + 13 &= 71117 \\
8 \times 8888 + 13 &= 711117 \\
\mbox{etc.}
\end{align*}
Escribe c\'odigo R, que verifica las $10$ primeras ecuaciones, imprimiendo los resultados, usando la f\'ormula dada
\begin{enumerate}
\item usando el bucle \texttt{for}.
\item usando una expresi\'on vectorizada.
\end{enumerate}
\item Escribe c\'odigo R que calcula el valor de la funci\'on
\[
f(x,y) = \begin{cases}
\sqrt{x} + \sin(y) , \ \mbox{ $x \geq 0$}\\
y + \cos(x) , \  \mbox{en otros casos}.
\end{cases}
\]
\end{enumerate}
\item Explica el juego llamado  morra \url{http://www.frontier.net/~grifftoe/morra.html}, a trav\'es de la explicaci\'on de las funciones utilizadas, as\'i como el uso de los argumentos en la llamada de funci\'on. Muestra ejemplos que muestren las estructuras producidas por esas funciones.
<<f3, prompt =TRUE, comment =NA, eval=FALSE>>=
# Ejemplo del uso del simplex
library(boot)   
    A1 <- rbind(c(-2, 1, 1), c(4, -1, 3))
    b1 <- c(1, 3)
    a <- c(2, 2, 3)
    simplex(a = a, A1 = A1, b1 = b1, maxi = TRUE)
    detach(package:boot)




resolver.juego <- function(A) {
       
        min.A <- min(A)
        A <- A - min.A  
        max.A <- max(A)
        A <- A / max(A)
        m <- nrow(A)
        n <- ncol(A)
        it <- n^3
        a <- c(rep(0, m), 1) 
        A1 <- -cbind(t(A), rep(-1, n)) 
        b1 <- rep(0, n)
        A3 <- t(as.matrix(c(rep(1, m), 0))) 
        b3 <- 1
        sx <- simplex(a=a, A1=A1, b1=b1, A3=A3, b3=b3,
                    maxi=TRUE, n.iter=it)
        
        a <- c(rep(0, n), 1) 
        A1 <- cbind(A, rep(-1, m)) 
        b1 <- rep(0, m)
        A3 <- t(as.matrix(c(rep(1, n), 0))) 
        b3 <- 1
        sy <- simplex(a=a, A1=A1, b1=b1, A3=A3, b3=b3,
                    maxi=FALSE, n.iter=it)

        soln <- list("A" = A * max.A + min.A,
                    "x" = sx$soln[1:m],
                    "y" = sy$soln[1:n],
                    "v" = sx$soln[m+1] * max.A + min.A)
        soln
        }



    A <- matrix(c(  0,-2,-2,3,0,0,4,0,0,
                    2,0,0,0,-3,-3,4,0,0,
                    2,0,0,3,0,0,0,-4,-4,
                    -3,0,-3,0,4,0,0,5,0,
                    0,3,0,-4,0,-4,0,5,0,
                    0,3,0,0,4,0,-5,0,-5,
                    -4,-4,0,0,0,5,0,0,6,
                    0,0,4,-5,-5,0,0,0,6,
                    0,0,4,0,0,5,-6,-6,0), 9, 9)

    library(boot)  
    s <- resolver.juego(A)
    round(cbind(s$x, s$y), 7)
@
\item Se dice que un n\'umero primo es \textit{gemelo} al par ordenado $(x ,y)$, tal que $y = x + 2$. Construye una lista de los n\'umeros primos gemelos menores que $100$.
\end{enumerate}
\end{document}