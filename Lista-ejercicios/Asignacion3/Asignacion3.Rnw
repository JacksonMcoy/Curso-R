\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{bigints}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\usepackage{amsmath} 
\usepackage{mathtools}
%\usepackage[spanish]{babel}
\usepackage{latexsym}
\geometry{verbose,tmargin=1.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage{graphicx}
\newcommand{\R}{\mathbb{R}}
\newcommand{\bb}[1]{\textbf{#1}}
\DeclareMathOperator{\rank}{\textbf{rango}}
\DeclareMathOperator{\proy}{\textbf{proy}}
\DeclareMathOperator{\nulll}{\textbf{nul}}
\DeclareMathOperator{\diag}{\textbf{diag}}
\DeclareMathOperator{\col}{\textbf{col}}
\DeclareMathOperator{\fila}{\textbf{fila}}
\DeclareMathOperator{\dimm}{dim}
\DeclareMathOperator{\Traz}{Tr}
%\theoremstyle{definition}
\everymath{\displaystyle}
\newtheorem{ejemplo}{{Ejemplo }}[section]
\newtheorem{teo}{{Teorema}}[section]
\newtheorem{defi}{{Definici\'on}}[section]
\newtheorem{pros}{{Proposici\'on}}[section]
\newtheorem{cor}{{Corolario}}[section]
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(grid)
#library(animation)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@

%\title{\underline{\textbf{Notas de mat\'ematica}}}
%\date{}
%\maketitle
\hspace*{0.5\linewidth}
\begin{minipage}{0.6\linewidth}
Curso: Introducci\'on a la Probabilidad y Estad\'istica CM -274\par
Ejercicios de Laboratorio de R\par
\end{minipage}

\vspace{0.5cm}

\textbf{Lecturas Importantes }
\begin{enumerate}
\item Fundamentos de programaci\'on de R, de  Vincent Zoonekynd

\url{http://zoonek2.free.fr/UNIX/48_R/02.html}.
\end{enumerate}


%{\normalsize Los c\'odigos, se presentaran impresos,  o como un archivo con extensi\'on $.R$, mostrando ejemplos de su ejecuci\'on.}
\setlength{\unitlength}{1in}

\begin{picture}(6,.1) 
\put(0,0) {\line(1,0){6.25}}         
\end{picture}

\vspace{0.5cm}

{\Large Preguntas }

\begin{enumerate}

\item 

\begin{enumerate}
\item Escribe una funci\'on, para calcular la siguiente integral:

\[
f: x \rightarrow \frac{H(x)}{\bigints_{x}^{\infty}H(t)dt}\quad \text{donde}\quad H(t) = 1 -\Phi_{\mu, \sigma}(t) = \bigints_{t}^{\infty}\phi_{\mu, \sigma}(t)dt,
\]

donde $\phi_{\mu, \sigma}$ es la funci\'on densidad de la distribuci\'on $N(\mu, \sigma^2)$.
\item Calcula las probabilidades binomiales, usando una funci\'on recursiva. Sea $X \sim \text{binomial}(n,p)$  y sea $f(x, k, p) = \mathbb{P}(X = x) = \binom{k}{x}p^x(1 - p)^{k -x}$, para $0 \leq x \leq k$ y $0 \leq p \leq 1$. Es f\'acil mostrar que:

\begin{align*}
f(0, k, p) &= (1 - p)^k;\\
f(x, k, p) &= \frac{( k - x +1)p}{x(1 -p)}f(x -1,k ,p)\ \ \text{para}\ x \geq 1.
\end{align*}

Usa, este resultado para escribir una funci\'on recursiva \texttt{binom.pmf(x, k, p)}, que retorna $f(x,k, p)$. Puedes verificar que esta funci\'on trabaja, comparando, los resultados con la funci\'on \texttt{dbinom(x, k, p)}.
\item La funci\'on \texttt{runif(n)} simula $n$ variables aleatorias id\'enticamente distribuidas a \texttt{Uniforme(0,1)}. As\'i $1 + \texttt{runif(n)}^2$, simula $n $ copias id\'enticamente distribuidas de $Y = 1 +X^2$. Estima y dibuja el pdf de $Y$ usando una muestra aleatoria simulada. Experimenta con el ancho de los intervalos para obtener un gr\'afico de buen aspecto: debe ser razonablemente detallada, pero tambi\'en razonablemente suave. ?`Qu\'e tama\~no debe tener su muestra para obtener una aproximaci\'on decente?. 
\end{enumerate}
\item 
\begin{enumerate}
\item Considere el siguiente escenario:

\vspace{0.2cm}
Pedro es un estudiante de universidad y todos sus amigos creen que el es valiente y que muchas de las chicas lo encuentran atractivo. Pedro hace poco ha ganado las regionales del ICPC y por ello su confianza es alta; en una fiesta encuentra a una chica que considera atractiva y le pregunta si quiere bailar con el. Ella parece ser m\'as inteligente que Pedro y le dice:

\vspace{0.2cm}

Hay $M$ hombres y $W$ mujeres en esta fiesta adem\'as de nosotros. Tienes $C$ caramelos en tu mano y los distribuir\'as aleatoriamente entre la gente (solo si es posible). Ahora si le pides a los hombres de esta fiesta sus caramelos, llamemos a esta cantidad $CC$ y si $CC$ se puede distribuir exacta e igualmente en $2$ grupos, bailar\'e contigo.

\vspace{0.2cm}

Pedro quiere saber la probabilidad de poder bailar con la chica. Determina un algoritmo  para resolver el problema conociendo los valores de $M ,W,C$. Por ejemplo si $ M=1 \quad W=2 \quad C=2 $, entonces la respuesta es $0.5555556$.
\item En Rusia, por el dia de la Bandera, el due\~no de una tienda decidi\'o decorar la ventada de su tienda con franjas de colores blanco, azul y rojo. El quiere cumplir con dos consignas:

\begin{itemize}
 \item No se pueden colocar franjas del mismo color de forma adyacente.
 \item Una franja de color azul siempre se debe colocar entre una blanca y una roja o entre una roja y una blanca (Ejemplo: BAR - RAB).
\end{itemize}

Determina un algoritmo  para expresar la cantidad de formas en las que el due\~no puede decorar su tienda conociendo s\'olo la cantidad de franjas que caben en la ventana ($N$). $N \geq 1$. Por ejemplo si $ N = 3 $, entonces tu respuesta es $4$ ya que se pueden formar 4 banderas;  BRB, RAB, BAR, RBR.

\end{enumerate}
\item 
\begin{enumerate}
\item Escribe un programa para leer, cada uno de los archivos \texttt{edad.txt} y \texttt{dientes.txt}  y luego escribe una lista amalgamada del archivo  \texttt{edad\_dientes.txt}, de la siguiente forma:

\begin{verbatim}
ID  Edad  Num_dientes
1   18     28
2   19     27
3   17     32
.   .      .
.   .      .
.   .      .
\end{verbatim}
\item La funci\'on \texttt{order(x)} retorna una permutaci\'on de \texttt{1:length(x)}, con los orden de los elementos de $x$. Por ejemplo:

<<foo0, prompt=TRUE, comment=NA, eval=TRUE >>=
x <- c(1.1, 0.7, 0.8, 1.4)
(y <- order(x))
@

<<foo1a, prompt=TRUE, comment=NA, eval=TRUE >>=
x[y]
@

Usando \texttt{order}, modifica tu  programa del ejercicio anterior para que el archivo de salida sea ordenado por su segunda columna.
\item ?`Cu\'ales son las ventajas y desventajas de un enfoque muy flexible (versus un enfoque menos flexible) para la regresi\'on o la clasificaci\'on? Bajo qu\'e circunstancias, podr\'ia preferirse un enfoque m\'as flexible a un enfoque menos flexible?.
\item Describe  las diferencias entre un enfoque de aprendizaje estad\'istico param\'etrico y otro no param\'etrico. ?`Cu\'ales son las ventajas de un enfoque param\'etrico para la regresi\'on o clasificaci\'on (en oposici\'on a un enfoque no param\'etrico)?. ?`Cu\'ales son sus desventajas?.
\end{enumerate}
\item 
\begin{enumerate}
\item Ejecuta este c\'odigo en tu mente y predice como ser\'a la salida. A continuaci\'on, ejecute el c\'odigo en R y compruebe sus predicciones.

<<foo1, prompt=TRUE, comment=NA, eval=FALSE >>=
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
@
\item ?`Qu\'e hace \texttt{show.legend = FALSE}?. ?`Qu\'e sucede si lo retiras?. ?` Qu\'e hace el argumento \texttt{se} a \texttt{geom\_smooth()}?.

\item ?`Cu\'al es el geometr\'ia predeterminada asociada con \texttt{stat\_summary()}?.
\item ?`Qu\'e hace \texttt{geom\_col()}?. ?` C\'omo es de diferente de \texttt{geom\_bar}?.
\item ?`Qu\'e variables calcula \texttt{stat\_smooth()}?. ?` Qu\'e par\'ametros controlan su comportamiento?.

\item ?` Los siguientes gr\'aficos son diferentes?. Explica tus respuesta.

<<foo2, prompt=TRUE, comment=NA, eval=FALSE >>=
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()

ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
@

\item Escribe el c\'odigo de R, para generar los siguientes gr\'aficos:

\begin{figure}[!h]
\centering
\includegraphics[scale=.55]{i1.png}
\end{figure}


\begin{figure}[!h]
\centering
\includegraphics[scale=.55]{i2.png}
\end{figure}


\begin{figure}[!h]
\centering
\includegraphics[scale=.55]{i3.png}
\end{figure}


\end{enumerate}
\newpage
\item Responde y escribe c\'odigo fuente si el ejercicio lo amerita, a las siguientes preguntas:
\begin{enumerate}
\item Los datos de \texttt{iris} corresponden a las medidas en cent\'imetros de las variables \texttt{length, width sepal} y \texttt{length , width petal} es decir ancho y altura de los p\'etalos y s\'epalos  respectivamente, de $50$ flores  cada una de tres especies de iris. Hay cuatro variables num\'ericas correspondientes al s\'epalo y  p\'etalo y un factor \texttt{Species}. Muestra  una tabla de medias para \texttt{Species} (donde las medias se deben calcularse por separado para cada una de las tres \texttt{Species}).
\item The National Institute of Standards and Technology tiene una p\'agina web que lista los primeros $500$ d\'igitos del numero irracional $\pi$. Podemos leer esos d\'igitos en R, por medio del script:

<<foo3, prompt=TRUE, comment=NA, eval=FALSE>>=
pidigits =
read.table("http://www.itl.nist.gov/div898/strd/univ/data/PiDigits.dat",
skip=60)
@

Usa la funci\'on \texttt{table} para construir una tabla de frecuencias de los d\'igitos del $1$ al $9$.
\item La  funci\'on \texttt{dim()} devuelve las dimensiones (un vector que tiene el n\'umero de filas entonces el n\'umero de columnas) de  matrices y data frames. Utilice esta funci\'on para encontrar el n\'umero de filas de los data frames de \texttt{tinting, possum} y \texttt{possumsites} del paquete \texttt{DAAG}. 
\item Supongamos que se est\'a interesado en mostrar  $3$ miembros de la familia de curvas beta, donde la densidad con par\'ametros $a$ y $b$, denotados por \texttt{Beta(a, b)} es dado por

\[
f(y) = \frac{1}{B(a, b)}y^{ a - 1}(1 - y)^{b - 1}, \ \ 0 < y < 1.
\]

Se puede dibujar un sola densidad beta, con param\'etros $a = 5$ y $b = 2$, usando la funci\'on \texttt{curve}:

<<foo4, prompt =TRUE, comment =NA, eval=FALSE>>=
curve(dbeta(x, 5, 2), from=0, to=1)
@
\begin{itemize}
\item Usa tres aplicaciones de la funci\'on \texttt{ curve} para mostrar las densidades   \texttt{Beta(2, 6)},  \texttt{Beta(4, 4)}  y  \texttt{Beta(6, 2)}  en un s\'olo gr\'afico.
\item Usa el siguiente comando de R, para colocar un t\'itulo  al gr\'afico de las ecuaciones de densidad beta


<<foo5, prompt =TRUE, comment =NA, eval=FALSE>>=
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
@
\item Usa la funci\'on \texttt{text}, para etiquetar cada una de las curvas betas con sus correspondientes valores de los param\'etros $a$ y $b$.
\item Redibuja el gr\'afico usando diferentes colores o tipos de l\'ineas para las tres curvas de densidad.
\end{itemize}
\item ?` Qu\'e es lo hace esta funci\'on estad\'istica?. ?` Qu\'e mejoras crees que se deberia hacer?.

<<foo6, prompt =TRUE, comment =NA, eval=FALSE>>=
bc <- function(lambda) {
  if (lambda == 0) {
    function(x) log(x)
  } else {
    function(x) (x ^ lambda - 1) / lambda
  }
}
@
\item Crea una funci\'on que crea funciones que calculan el \texttt{i-\'esimo momento central} de un vector num\'erico. Puedes verificar, usando el siguiente c\'odigo:

<<foo7, prompt =TRUE, comment =NA, eval=FALSE>>=
m1 <- moment(1)
m2 <- moment(2)

x <- runif(100)
stopifnot(all.equal(m1(x), 0))
stopifnot(all.equal(m2(x), var(x) * 99 / 100))
@
\item La idea de la integraci\'on num\'erica es simple: encontrar el \'area bajo una curva, aproximando esa curva por simples componentes. Dos aproximaciones se implementan a continuaci\'on:

<<foo8, prompt =TRUE, comment =NA, eval=FALSE>>=
puntomedio <- function(f, a, b) {
  (b - a) * f((a + b) / 2)
}

trapecio <- function(f, a, b) {
  (b - a) / 2 * (f(a) + f(b))
}
@

Para hacer m\'as precisos estas aproximaciones, dividiremos el rango en pedazos m\'as peque\~nos e integraremos cada pieza usando una de las reglas simples. Esto se llama integraci\'on compuesta. Implementaremos dos nuevas funciones, a partir de esta definici\'on:

<<foo9, prompt =TRUE, comment =NA, eval=FALSE>>=
puntomedio_compuesto <- function(f, a, b, n = 10) {
  puntos<- seq(a, b, length = n + 1)
  h <- (b - a) / n

  area <- 0
  for (i in seq_len(n)) {
    area <- area + h * f((puntos[i] + puntos[i + 1]) / 2)
  }
  area
}

trapecio_compuesto <- function(f, a, b, n = 10) {
  puntos <- seq(a, b, length = n + 1)
  h <- (b - a) / n

  area <- 0
  for (i in seq_len(n)) {
    area <- area + h / 2 * (f(puntos[i]) + f(puntos[i + 1]))
  }
  area
}
@


Te dar\'as cuenta de que hay una gran cantidad de duplicaci\'on entre  \texttt{puntomedio\_compuesto()} y \texttt{trapecio\_compuesto()}. Aparte de la regla interna utilizada para integrar en un rango, son b\'asicamente los mismos. A partir de estas funciones espec\'ificas puede extraer una funci\'on de integraci\'on compuesta m\'as general:


<<foo10, prompt =TRUE, comment =NA, eval=FALSE>>=
compuesto<- function(f, a, b, n = 10, rule) {
  puntos <- seq(a, b, length = n + 1)

  area <- 0
  for (i in seq_len(n)) {
    area <- area + rule(f, puntos[i], puntos[i + 1])
  }

  area
}
composite(sin, 0, pi, n = 10, rule = puntomedio)
composite(sin, 0, pi, n = 10, rule = trapecio)
@

Esta funci\'on toma dos funciones como argumentos: la funci\'on a integrar y la regla de integraci\'on. Ahora podemos agregar reglas a\'un mejores para integrar rangos m\'as peque\~nos:

<<foo11, prompt =TRUE, comment =NA, eval=FALSE>>=
simpson <- function(f, a, b) {
  (b - a) / 6 * (f(a) + 4 * f((a + b) / 2) + f(b))
}

boole <- function(f, a, b) {
  pos <- function(i) a + i * (b - a) / 4
  fi <- function(i) f(pos(i))

  (b - a) / 90 *
    (7 * fi(0) + 32 * fi(1) + 12 * fi(2) + 32 * fi(3) + 7 * fi(4))
}

composicion(sin, 0, pi, n = 10, rule = simpson)
composite(sin, 0, pi, n = 10, rule = boole)
@

Resulta que las reglas del punto medio, trapecio, Simpson y Boole son ejemplos de una familia m\'as general llamada reglas de Newton-Cotes. (Son polinomios de creciente complejidad.) Podemos usar esta estructura com\'un para escribir una funci\'on que puede generar cualquier regla general de Newton-Cotes:

<<foo12, prompt =TRUE, comment =NA, eval=FALSE>>=
newton_cotes <- function(coef, open = FALSE) {
  n <- length(coef) + open

  function(f, a, b) {
    pos <- function(i) a + i * (b - a) / n
    points <- pos(seq.int(0, length(coef) - 1))

    (b - a) / sum(coef) * sum(f(puntos) * coef)
  }
}

boole <- newton_cotes(c(7, 32, 12, 32, 7))
milne <- newton_cotes(c(2, -1, 2), open = TRUE)
compuesto(sin, 0, pi, n = 10, rule = milne)
@

En lugar de crear funciones individuales (por ejemplo, \texttt{puntomedio()}, \texttt{trapecio()}, \texttt{simpson()}, etc.), podr\'iamos almacenarlas en una lista. Si se hace as\'i, ?`c\'omo cambiar\'ia el c\'odigo?. ?`Puedes crear la lista de funciones de una lista de coeficientes para las f\'ormulas de Newton-Cotes?.

\item ?` Por qu\'e, las dos siguientes invocaciones de \texttt{lapply()} son equivalentes?

<<foo13, prompt =TRUE, comment =NA, eval=FALSE>>=
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(100)

lapply(trims, function(trim) mean(x, trim = trim))
lapply(trims, mean, x = x)

@
\end{enumerate}
\end{enumerate}

\end{document}
