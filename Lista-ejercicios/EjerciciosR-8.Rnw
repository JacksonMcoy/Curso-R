\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{bigints}
\usepackage{geometry}
\geometry{verbose,tmargin=1.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(grid)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@

\title{Ejercicios  de  R}


\author{Curso: Introducci\'on a la Estad\'istica y Probabilidades CM-274}
\date{}
\maketitle

\vspace{0.3cm}


\textbf{Lecturas Importantes }
\begin{enumerate}
\item Una gu\'ia de ciencia de datos con  R.

\url{http://www.analyticsvidhya.com/blog/2016/02/complete-tutorial-learn-data-science-scratch/}.
\end{enumerate}
\setlength{\unitlength}{1in}

\begin{picture}(6,.1) 
\put(0,0) {\line(1,0){6.25}}         
\end{picture}

\vspace{0.2cm}

{\Large Preguntas }


\vspace{0.3cm}
\begin{enumerate}
\item Sea una definici\'on de la raiz cuadrada, definida por el m\'etodo de Newton


<<foq1, prompt =TRUE, comment =NA, eval=FALSE>>=
r =
  function(x, eps = 1e-10) {
    g = 1
    while(abs(1 - g^2/x) > eps)
      g = .5 * (g + x/g)
    g
  }
@
pero esta funci\'on trabaja para escalares, pero no cuando se pasa un vector

\begin{verbatim}
>r(c(1,2))
[1] 1
Warning message:
In while (abs(1 - g^2/x) > eps) g = 0.5 * (g + x/g) :
  the condition has length > 1 and only the first element will be used
\end{verbatim}

Una manera de resolver este problema es dividir el c\'alculo en dos partes; una para calcular la ra\'iz cuadrada para valores escalares y la otra usa un bucle sobre un vector

<<foq2, prompt =TRUE, comment =NA, eval=FALSE>>=
s.r =
  function(x, eps = 1e-10) {
    g = 1
    while(abs(1 - g^2/x) > eps)
    g = .5 * (g + x/g)
  g
}
@

<<foq3, prompt =TRUE, comment =NA, eval=FALSE>>=
 r =
  function(x, eps = 1e-10) {
    ans = numeric(length(x))
    for(i in seq(along = x))
      ans[i] = s.r(x[i])
  ans
}
@

Calculando ahora los valores 

<<foq4, prompt =TRUE, comment =NA, eval=FALSE>>=
 r(c(1,2))
@

La estrategia de usar bucles funciona, pero tienden  a ser ineficientes debido a los c\'alculos que se  llevan a cabo elemento a elemento. Una estrategia alternativa es llevar a cabo el  c\'alculo de vectores en lugar de escalares. En este caso particular, podemos cambiar el c\'alculo para que funcione con  vectores como sigue

\begin{itemize}
\item Cambia la inicializaci\'on de $g$ de forma que sea un vector y no un escalar
\begin{verbatim}
g = rep(1, length = length(x))
\end{verbatim}
\item Cambiar la prueba para que los cambios de \textbf{g} continuen  hasta que todos los elementos de la respuesta se hayan calculado con una  suficiente precisi\'on.

\begin{verbatim}
while(any(abs(1 - g^2/x)) > eps))
\end{verbatim}
\end{itemize}

Esto contin\'ua mejorando las aproximaciones de la ra\'iz cuadrada hasta que todos ellos han alcanzado el nivel de exactitud. Lleva esto a la  pr\'actica implementando los cambios en \texttt{r}  y
probando  la funci\'on resultante.


La estrategia de la secci\'on anterior conlleva el c\'alculo de la ra\'iz cuadrada  incluso despu\'es de que las ra\'ices cuadradas  se han determinado para  elementos de $x$. Estos c\'alculos adicionales pueden evitarse manteniendo un registro de los elementos de $x$ cuyas  ra\'ices no se calculan con la  precisi\'on suficiente y s\'olo realizando  los c\'alculos para esos elementos.

\begin{verbatim}
n.d = abs(1 - g^2/x)) > eps
\end{verbatim}

Esto puede ser hecho como parte de la prueba 

\begin{verbatim}
while(any((n.d = abs(1 - g^2/x))) > eps))
\end{verbatim}

Dentro  del bucle, los cambios pueden llevarse a cabo s\'olo en el subconjunto de \textbf{g} que necesita ser actualizado, es decir,$\texttt{g[n.d]}$. Las actualizaciones se llevan a cabo utilizando s\'olo los elementos correspondientes de \textbf{g} y $x$ , es decir, $\texttt{g[n.d]}$ y $\texttt{x [n.d]}$.

\item El siguiente programa que produce?

<<foq5, prompt =TRUE, comment =NA, eval=FALSE>>=
f1 <- function(x ,k){
  n <- length(x)
  r <- NULL
  for(i in 1:(n -k)){
    if(all(x[i:i + k -1]==1))r <- c(r, i)
  }
  return(r)
}
@

\begin{enumerate}
\item Si realizamos un test

<<foq6, prompt =TRUE, comment =NA, eval=FALSE>>=
f1(c(1,0,0,1,1, 0, 1,1,1), 2)
@

y produce los valores $3 4 6 7$. Es correcto el resultado?.
\item Utiliza la funci\'on \texttt{debug()} para utilizar \texttt{browse} y mostrar 
\begin{itemize}
\item Si el  vector fue recibido correctamente
\item cuando colocamos $n$ dos veces en \texttt{browse}. Qu\'e sucede cuando colocamos $n$ tres veces en \texttt{browse}. Explica.
\item Si $k =2$, que significa y que produce lo siguiente
\begin{verbatim}
Browse[2] > x[i:i + k- 1]
\end{verbatim}

\begin{verbatim}
Browse[2] > i:i + k- 1
\end{verbatim}

\begin{verbatim}
Browse[2] > i
\end{verbatim}
\begin{verbatim}
Browse[2] > k
\end{verbatim}
\end{itemize}
donde se encuentra el error, del c\'odigo inicial, si es que existe?.
\end{enumerate}
\item Escribimos dos funciones \texttt{primero} y \texttt{ultimo}, que extrae un n\'umero espec\'ifico de elementos desde el inicio y el final de un vector (en el orden que aparecen en el vector). Las funciones deben ser llamadas como siguen

\begin{verbatim}
primero(x , k)
ultimo(x, k)
\end{verbatim}

donde $x$ es el  vector de  valores que son extraidos  y $k$ especifica el n\'umero de elementos a extraer. Si el argumento $k$ es omitido en una de las llamadas, debe tomar por valor por defecto $1$.

\begin{enumerate}
\item Asumiendo que $k \leq \texttt{length(x)}$, escribimos versiones (lo m\'as simples) de las funciones dadas anteriormente.
\item Modifica las funciones (a) de manera que  si $k > \texttt{length(x)}$ entonces estas funciones deberian retornar los valores en $x$.
\item Modifica las funciones (a) de manera que si $k > \texttt{length(x)}$ las funciones retornan los $k$ valores, si no hay valores existentes estos deben ser \texttt{NA}.
\end{enumerate}
\item Para $n >2$, la densidad \texttt{chi-cuadrado} tiene un m\'aximo valor. Escribe c\'odigo R, que usa la funci\'on \texttt{optimise} para localizar el m\'aximo de la densidad para un valor $n >2$.
\item El siguiente c\'odigo define una funci\'on para la clase \texttt{palette}
<<foq7, prompt =TRUE, comment =NA, eval=TRUE>>=
palette <- function(r, g, b, max=1) {
  p <- list(colours=cbind(r, g, b), max=max)
  class(p) <- "palette"
  p
}
@

Ejemplos de la funci\'on son mostrados a continuaci\'on 

<<foq8, prompt =TRUE, comment =NA, eval=TRUE>>=
palette(1, 0, 0)
@
<<foq9, prompt =TRUE, comment =NA, eval=TRUE>>=
 palette(0:3, 0, 0, max=3)
@

\begin{enumerate}
\item Escribe una funci\'on que imprima los colores usando la funci\'on \texttt{rgb()}. Por ejemplo
\begin{verbatim}
palette(1, 0, 0)
[1] "#FF0000"
\end{verbatim}
\begin{verbatim}
palette(0:3, 0, 0, max=3)
[1] "#000000" "#550000" "#AA0000" "#FF0000"
\end{verbatim}
\item Escribe una funci\'on que retorne un objeto conteniendos los colores seleccionados. Por ejemplo
\begin{verbatim}
palette(0:3, 0, 0, max=3)[1]
[1] "#000000"
\end{verbatim}
\begin{verbatim}
 palette(0:3, 0, 0, max=3)[2:3]
[1] "#550000" "#AA0000"
\end{verbatim}
El resultado de esta funci\'on  es un objeto de \texttt{palette} que est\'a siendo impreso por la funci\'on anterior.
\end{enumerate}

\item

\begin{enumerate}
\item  ?` Qu\'e produce los siguientes c\'odigos y las propiedades que muestran

<<foq10, prompt =TRUE, comment =NA, eval=FALSE>>=
f1 <- function(x = {y <- 1; 2}, y = 0) {
  x + y
}
f1()
@
\item ?` Por qu\'e las siguientes dos invocaciones de \texttt{lapply } son equivalentes?

<<foq11, prompt =TRUE, comment =NA, eval=FALSE>>=
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(100)

lapply(trims, function(trim) mean(x, trim = trim))
lapply(trims, mean, x = x)
@
\item  Considera el siguiente problema : Dado una matriz n\'umerica $X$, determina el \'indice de la primera fila de n\'umeros positivos que no contiene $NA$. Resuelve el problema usando \texttt{for} y la funci\'on \texttt{apply()}.
\item ?`C\'omo se determina el entorno desde el que se llama una funci\'on?.
\end{enumerate}
\item Se puede crear un \texttt{array} de prueba de $3$ dimensiones, de la siguiente manera

<<foq12, prompt =TRUE, comment =NA, eval=FALSE>>=
p_Array <- array( sample( 1:60, 60, replace=F), dim=c(5,4,3) )
@

La expresi\'on anterior produce un array $5 \times 4 \times 3$, que puede representado matem\'aticamente como

\[
\{ x_{i, j, k} : i = 1, 2, \dots, 5; j = 1, 2, 3,  4;  k = 1, 2, 3 \}
\]

Adem\'as   

<<foq13, prompt =TRUE, comment =NA, eval=FALSE>>=
apply(p_Array, 3, tmpFn)
@

significa que el \'indice $k$ es guardado en la respuesta y la funci\'on \texttt{tmpFn} es aplicado  a las $3$ matrices

$\{ x_{i, j, 1 }: 1 \leq  i \leq 5;   1 \leq j \leq 4\}$, $\{x_{i , j ,  2 }: 1 \leq i \leq 5;  1  \leq j \leq 4\}$ y $\{x_{i, j,3} : 1 \leq i \leq  5;  1 \leq j \leq 4\}$.


Similarmente 

<<foq14, prompt =TRUE, comment =NA, eval=FALSE>>=
apply(p_Array, c(3, 1), tmpFn)
@

significa que los \'indices $i$ y $k$ son guardados en las respuestas y la funci\'on \texttt{tmpFn} es aplicado  a los $15$ vectores


\vspace{0.2cm}

$\{ x_{i, j, 1 }:   1 \leq j \leq 4\}$,  $\{ x_{i, j, 2 }: 1 \leq j \leq 4\}$, etc.

\vspace{0.2cm}


La expresi\'on anterior, hace la misma operaci\'on, pero el formato de la respuesta es diferente: al usar \texttt{apply} de esta manera, siempre vale la pena escribir un peque\~no ejemplo para comprobar que el formato de la salida de \texttt{apply} es como se espera.

\begin{enumerate}
\item Escribe una funci\'on \texttt{p\_Fn} que toma un s\'olo argumento, que es una array de dimensi\'on $3$. Si este array es notado por $\{x_{i ,j, k}: i = 1, 2, \dots , d_1;  j = 1, 2, \dots, d_2; k = 1, 2, \dots, d_3 \}$ entonces a funci\'on \texttt{tmpFn} retorna una lista de la matriz $\{w_{i,j, k} \}$ de orden $d_1 \times d_2 \times d_3$ y la matriz $\{z_{i,j} \}$ de orden $d_2 \times d_3$, donde

\[
w_{i, j, k} = x_{i, j, k} - \min_{i = 1}^{d_1}x_{i, j, k}\ \ \ \text{y}\ \ \  z_{j, k} = \min_{i = 1}^{d_1}x_{i, j, k} - \max_{i = 1}^{d_1}x_{i, j, k}
\]

\item Escribe una funci\'on \texttt{p\_Fn2}, que retorna una matriz $\{z_{j ,k}\}$ de orden $d_2 \times d_3$, donde

\[
z_{j, k} = \sum_{i =1}^{d_1}x^k_{i, j, k}.
\]
\end{enumerate}
\item Un camino aleatorio sim\'etrico empieza en el origen y es definido como sigue: Supongase que $X_1, X_2, \dots $ son variables aleatorias id\'enticamente distribuidas independientes con la siguiente \mbox{distribuci\'on }

\[
\begin{cases}
+ 1 & \text{con probabilidad } \ \ 1/2 \\
- 1 & \text{con probabilidad }  \ \ 1/2
\end{cases}
\]

Definimos la secuencia $\{S_n\}_{n \geq 0}$ como

\begin{align*}
S_0 &= 0 \\
S_n &= S_{n -1} + X_n, \ \ \text{para } \ \ n = 1, 2, \dots
\end{align*}

Entonces $\{S_n\}_{n \geq 0}$ es un camino aleatorio sim\'etrico empezando en el origen. La posici\'on del camino aleatorio en el tiempo $n$ es la suma de los previos pasos : $S_n = X_1 + \cdots X_n$.

\begin{enumerate}
\item Escribe una funci\'on \texttt{rcamino(n)} que toma un argumento $n$ y retorna un vector el cu\'al es una realizaci\'on de $(S_0, S_1, \dots, S_n)$ las primeras $n$ posiciones de un camino aleatorio sim\'etrico que empieza en el origen. El c\'odigo siguiente 

<<foq15, prompt =TRUE, comment =NA, eval=FALSE>>=
sample( c(-1,1), n, replace=TRUE, prob=c(0.5,0.5) )
@

simula $n$ pasos.

\item Escribe una funci\'on \texttt{rcaminoPos(n)} que simula el hecho que un camino dura   para una longitud  de tiempo $n$ y que  devuelve la longitud de tiempo del camino que pasa por encima del eje X. Debes observar que un camino  con longitud $6$ y v\'ertices en  $0, 1, 0, -1, 0, 1, 0$ est\'a 4 unidades de tiempo por encima del eje X y 2 unidades de tiempo por debajo del eje X).

\end{enumerate}
\item El conjunto de datos \texttt{faithful} contiene la duraci\'on (en minutos )  \texttt{eruptions} y el tiempo de espera  hasta otra erupci\'on \texttt{waiting}(en minutos) de para un geyser Old Faithful. Estamos interesados en conocer la relaci\'on que hay entre las dos variables.

\begin{enumerate}
\item Crea una variable factor \texttt{longitud} que es \textbf{t\_erup1} si la erupci\'on es menor que $3.2$ minutos y \textbf{t\_erup2} en otros casos.

\item Usa la funci\'on \texttt{bwplot} en el paquete \texttt{lattice}, para construir un gr\'afico (diagrama de cajas paralelos ) de los tiempos de espera para las erupciones  \textbf{t\_erup1} y \textbf{t\_erup2}.
\item  Usa la funci\'on \texttt{densityplot}  construye  un gr\'afico (de densidades superpuestas ) de los tiempos de espera para las erupciones  \textbf{t\_erup1} y \textbf{t\_erup2}.

\vspace{0.2cm}

En el problema anterior, se compararon los tiempos de espera de los g\'eiseres Old Faithful para las erupciones \textbf{t\_erup1} y \textbf{t\_erup2} donde la  variable \texttt{longitud} en el data frame \texttt{faithful}  define la duraci\'on de la erupci\'on.

\item Supongamos un data frame \texttt{dframe} que contiene una variable num\'erica \texttt{num.var} y un factor \texttt{factor.var}. Despu\'es de que el paquete \texttt{ggplot2} se halla cargado, entonces, los comandos de R

<<foq16, prompt =TRUE, comment =NA, eval=FALSE>>=
ggplot(dframe, aes(x = num.var, color = factor.var))
+ geom_density()
@

construir\'an  estimaciones de densidades superpuestas  de la variable \texttt{num.var} para cada valor del factor \texttt{factor.var}. Utiliza estos comandos para construir estimaciones de densidades superpuestas de los tiempos de espera de los g\'eiseres con erupciones \textbf{t\_erup1} y \textbf{t\_erup2}.
\item Con  un data frame \texttt{dframe} que contiene una variable num\'erica \texttt{num.var} y un factor \texttt{factor.var}, la sintaxis de \texttt{ggplot2}

<<foq17, prompt =TRUE, comment =NA, eval=FALSE>>=
ggplot(dframe, aes(x = num.var, color = factor.var))
+ geom_boxplot()
@

construir\'a caja de bloques paralelos de la variable \texttt{num.var} para cada valor del factor \texttt{factor.var}. Utiliza estos comandos para construir cajas de bloques paralelos  de los tiempos de espera de los g\'eiseres con erupciones \textbf{t\_erup1} y \textbf{t\_erup2}.


\end{enumerate}

\vspace{0.2cm}


Sugerencia: Revisa el siguiente ejemplo

<<foq18, prompt =TRUE, comment =NA, eval=FALSE>>=
library(ggplot2)

#datos de muestra

dat <- data.frame(dens = c(rnorm(100), rnorm(100, 10, 5))
                   , lines = rep(c("a", "b"), each = 100))
#Plot.
ggplot(dat, aes(x = dens, fill = lines)) + geom_density(alpha = 0.5)
@



\item Supongamos que se est\'a interesado en mostrar  $3$ miembros de la familia de curvas beta, donde la densidad con par\'ametros $a$ y $b$, denotados por \texttt{Beta(a, b)} es dado por

\[
f(y) = \frac{1}{B(a, b)}y^{ a - 1}(1 - y)^{b - 1}, \ \ 0 < y < 1.
\]

Se puede dibujar un sola densidad beta, con param\'etros $a = 5$ y $b = 2$, usando la funci\'on \texttt{curve}:

<<foq19, prompt =TRUE, comment =NA, eval=FALSE>>=
curve(dbeta(x, 5, 2), from=0, to=1)
@
\begin{enumerate}
\item Usa tres aplicaciones de la funci\'on \texttt{ curve} para mostrar las densidades   \texttt{Beta(2, 6)},  \texttt{Beta(4, 4)}  y  \texttt{Beta(6, 2)}  en un s\'olo gr\'afico.
\item Usa el siguiente comando de R, para colocar un t\'itulo  al gr\'afico de las ecuaciones de densidad beta


<<foq20, prompt =TRUE, comment =NA, eval=FALSE>>=
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
@
\item Usa la funci\'on \texttt{text}, para etiquetar cada una de las curvas betas con sus correspondientes valores de los param\'etros $a$ y $b$.
\item Redibuja el gr\'afico usando diferentes colores o tipos de l\'ineas para las tres curvas de densidad.
\end{enumerate}
\item Explica el siguiente c\'odigo y el Teorema del L\'imite Central. La respuesta debe ser correctamente escrita y ordenada

<<foq21, prompt =TRUE, comment =NA, eval=FALSE>>=
iter = 2000
avg0 <- avg1 <- avg2 <- avg3 <- rep(0, iter)
for (i in 1:iter) {
    S = rexp(90)  # muestra desde la distribucion   exp(1) 
    avg0[i] = S[1]
    avg1[i] = mean(S[1:3])
    avg2[i] = mean(S[1:30])
    avg3[i] = mean(S[1:90])
}
SR = stack(list(`n=1` = avg0, `n=3` = avg1, `n=30` = avg2,
    `n=90` = avg3))
names(SR) = c("promedios", "n")
ggplot(SR, aes(x = averages, y = ..density..)) + facet_grid(n ~
    .) + geom_histogram() + scale_x_continuous(limits = c(0,
    3))
@
\item Escribe una funci\'on llamada \texttt{listaFN} que toma un \'unico argumento $n$ e implementa el siguiente algoritmo

\begin{enumerate}
\item Simula $n$ n\'umeros independientes, denotado por $\textbf{x} = (x_1, x_2, \dots, x_n)$ desde la distribuci\'on normal est\'andar.
\item Calcula la media $\overline{\textbf{x}} = \sum_{j =1}^{n}x_j /n$.
\item Si $\overline{\textbf{x}} \geq 0 $, entonces simula $n$ n\'umeros independientes, denotados por $\textbf{y} = (y_1, y_2, \dots, y_n)$ desde la densidad exponencial con media $\overline{\textbf{x}}$.
\item Si $\overline{\textbf{x}} < 0 $, entonces simula $n$ n\'umeros independientes, denotados por $\textbf{z} = (z_1, z_2, \dots, z_n)$ desde la densidad exponencial con media $-\overline{\textbf{x}}$. Se coloca  $\textbf{y} = (y_1, y_2, \dots, y_n) = \textbf{-z}$.
\item Calcula $k$ que es el n\'umero $j$ con $\vert y_j \vert > \vert x_j\vert$.
\item Retorna la lista de $\textbf{x, y}$ y $k$ con nombres \texttt{xVec, yVec} y \texttt{count} respectivamente.
\item Ejecuta las siguientes l\'ineas y verifica el formato de las respuestas


<<foq22, prompt =TRUE, comment =NA, eval=FALSE>>=
lapply( rep(10,4), listaFN )
sapply( rep(10,4), listaFN )
@
\end{enumerate}
\end{enumerate}
\end{document}
